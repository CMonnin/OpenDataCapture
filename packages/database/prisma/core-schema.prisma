generator client {
  provider = "prisma-client-js"
  output   = "../lib/core"
}

datasource db {
  provider = "mongodb"
  url      = env("CORE_DATABASE_URL")
}

// Assignments

enum AssignmentStatus {
  CANCELED
  COMPLETE
  EXPIRED
  OUTSTANDING
}

model AssignmentModel {
  createdAt        DateTime               @default(now()) @db.Date
  updatedAt        DateTime               @updatedAt @db.Date
  id               String                 @id @map("_id")
  completedAt      DateTime?
  expiresAt        DateTime
  instrument       InstrumentModel        @relation(fields: [instrumentId], references: [id])
  instrumentId     String                 @db.ObjectId
  instrumentRecord InstrumentRecordModel?
  status           AssignmentStatus
  subject          SubjectModel           @relation(fields: [subjectId], references: [id])
  subjectId        String
  url              String
}

// Groups

model GroupModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  instrumentRecords InstrumentRecordModel[]
  name              String                  @unique
  subjects          SubjectModel[]          @relation(fields: [subjectIds], references: [id])
  subjectIds        String[]
  userIds           String[]                @db.ObjectId
  users             UserModel[]             @relation(fields: [userIds], references: [id])
  visits            VisitModel[]
}

/// Instrument Records

model InstrumentRecordModel {
  createdAt    DateTime         @default(now()) @db.Date
  updatedAt    DateTime         @updatedAt @db.Date
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  data         Json?
  date         DateTime         @db.Date
  group        GroupModel?      @relation(fields: [groupId], references: [id])
  groupId      String?          @db.ObjectId
  subject      SubjectModel     @relation(fields: [subjectId], references: [id])
  subjectId    String
  instrument   InstrumentModel  @relation(fields: [instrumentId], references: [id])
  instrumentId String           @db.ObjectId
  assignment   AssignmentModel? @relation(fields: [assignmentId], references: [id])
  assignmentId String?          @unique
}

// Instruments 

enum InstrumentKind {
  FORM
  INTERACTIVE
  UNKNOWN
}

type InstrumentDetails {
  // string | Record<Language, string>
  description       Json
  estimatedDuration Int
  // string | string[] | Record<Language, string | string[]>
  instructions      Json
  // string | Record<Language, string>
  title             Json
}

model InstrumentModel {
  createdAt   DateTime                @default(now()) @db.Date
  updatedAt   DateTime                @updatedAt @db.Date
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  source      String
  bundle      String
  details     InstrumentDetails
  kind        InstrumentKind
  /// Language | Language[]
  language    Json
  name        String
  /// string[] | Record<Language, string[]>
  tags        Json
  version     Float
  records     InstrumentRecordModel[]
  assignments AssignmentModel[]
}

// Subjects

enum Sex {
  MALE
  FEMALE
}

model SubjectModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @map("_id")
  dateOfBirth       DateTime                @db.Date
  firstName         String?
  groupIds          String[]                @db.ObjectId
  groups            GroupModel[]            @relation(fields: [groupIds], references: [id])
  lastName          String?
  sex               Sex
  instrumentRecords InstrumentRecordModel[]
  visits            VisitModel[]
  assignments       AssignmentModel[]
}

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

model UserModel {
  createdAt           DateTime             @default(now()) @db.Date
  updatedAt           DateTime             @updatedAt @db.Date
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  basePermissionLevel BasePermissionLevel?
  firstName           String
  groupIds            String[]             @db.ObjectId
  groups              GroupModel[]         @relation(fields: [groupIds], references: [id])
  lastName            String
  password            String
  username            String
}

model VisitModel {
  createdAt DateTime     @default(now()) @db.Date
  updatedAt DateTime     @updatedAt @db.Date
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime     @db.Date
  group     GroupModel?  @relation(fields: [groupId], references: [id])
  groupId   String?      @db.ObjectId
  subject   SubjectModel @relation(fields: [subjectId], references: [id])
  subjectId String
}

// Setup

model SetupStateModel {
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isSetup   Boolean
}
