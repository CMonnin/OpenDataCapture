generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Groups

model GroupModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  instrumentRecords InstrumentRecordModel[]
  name              String
  subjects          SubjectModel[]          @relation(fields: [subjectIds], references: [id])
  subjectIds        String[]                @db.ObjectId
  userIds           String[]                @db.ObjectId
  users             UserModel[]             @relation(fields: [userIds], references: [id])
  VisitModel        VisitModel[]
}

/// Instrument Records

model InstrumentRecordModel {
  createdAt    DateTime        @default(now()) @db.Date
  updatedAt    DateTime        @updatedAt @db.Date
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  data         Json
  date         DateTime        @db.Date
  group        GroupModel      @relation(fields: [groupId], references: [id])
  groupId      String          @db.ObjectId
  subject      SubjectModel    @relation(fields: [subjectId], references: [id])
  subjectId    String          @db.ObjectId
  instrument   InstrumentModel @relation(fields: [instrumentId], references: [id])
  instrumentId String          @db.ObjectId
}

// Instruments 

type InstrumentDetails {
  // string | Record<Language, string>
  description       Json
  estimatedDuration Int
  // string | string[] | Record<Language, string | string[]>
  instructions      Json
  // string | Record<Language, string>
  title             Json
}

model InstrumentModel {
  createdAt DateTime                @default(now()) @db.Date
  updatedAt DateTime                @updatedAt @db.Date
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  source    String
  bundle    String
  details   InstrumentDetails
  kind      String
  /// Language | Language[]
  language  Json
  name      String
  /// string[] | Record<Language, string[]>
  tags      Json
  version   Float
  records   InstrumentRecordModel[]
}

// Subjects

model SubjectModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  dateOfBirth       DateTime                @db.Date
  firstName         String?
  groupIds          String[]                @db.ObjectId
  groups            GroupModel[]            @relation(fields: [groupIds], references: [id])
  identifier        String
  lastName          String?
  sex               String
  instrumentRecords InstrumentRecordModel[]
  VisitModel        VisitModel[]
}

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

model UserModel {
  createdAt           DateTime             @default(now()) @db.Date
  updatedAt           DateTime             @updatedAt @db.Date
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  basePermissionLevel BasePermissionLevel?
  firstName           String
  groupIds            String[]             @db.ObjectId
  groups              GroupModel[]         @relation(fields: [groupIds], references: [id])
  lastName            String
  password            String
  username            String
}

model VisitModel {
  createdAt DateTime     @default(now()) @db.Date
  updatedAt DateTime     @updatedAt @db.Date
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime     @db.Date
  group     GroupModel?  @relation(fields: [groupId], references: [id])
  groupId   String?      @db.ObjectId
  subject   SubjectModel @relation(fields: [subjectId], references: [id])
  subjectId String       @db.ObjectId
}
