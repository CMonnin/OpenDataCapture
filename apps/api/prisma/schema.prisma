generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Groups

model Group {
  createdAt         DateTime           @default(now()) @db.Date
  updatedAt         DateTime           @updatedAt @db.Date
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  instrumentRecords InstrumentRecord[]
  name              String
  subject           Subject            @relation(fields: [subjectId], references: [id])
  subjectId         String             @db.ObjectId
  userIds           String[]           @db.ObjectId
  users             User[]
}

/// Instrument Records

model InstrumentRecord {
  createdAt    DateTime   @default(now()) @db.Date
  updatedAt    DateTime   @updatedAt @db.Date
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  data         Json
  date         DateTime   @db.Date
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      String     @db.ObjectId
  subject      Subject    @relation(fields: [subjectId], references: [id])
  subjectId    String     @db.ObjectId
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  instrumentId String     @db.ObjectId
}

// Instruments 

type InstrumentsDetails {
  // string | Record<Language, string>
  description       Json
  estimatedDuration Int
  // string | string[] | Record<Language, string | string[]>
  instructions      Json
  // string | Record<Language, string>
  title             Json
}

model Instrument {
  createdAt DateTime           @default(now()) @db.Date
  updatedAt DateTime           @updatedAt @db.Date
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  source    String
  bundle    String
  details   InstrumentsDetails
  kind      String
  /// Language | Language[]
  language  Json
  name      String
  /// string[] | Record<Language, string[]>
  tags      Json
  version   Float
  records   InstrumentRecord[]
}

// Subjects

model Subject {
  createdAt         DateTime           @default(now()) @db.Date
  updatedAt         DateTime           @updatedAt @db.Date
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  dateOfBirth       DateTime           @db.Date
  firstName         String?
  groups            Group[]
  identifier        String
  lastName          String?
  sex               String
  instrumentRecords InstrumentRecord[]
}

model User {
  createdAt           DateTime @default(now()) @db.Date
  updatedAt           DateTime @updatedAt @db.Date
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  basePermissionLevel String
  firstName           String?
  groupIds            String[] @db.ObjectId
  groups              Group    @relation(fields: [groupIds], references: [id])
  lastName            String?
  password            String
  username            String
}

model Visit {
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @db.Date
  group     String   @db.ObjectId
  subject   String   @db.ObjectId
}
