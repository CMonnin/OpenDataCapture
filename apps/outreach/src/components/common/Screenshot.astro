---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import { useTranslations, type Language } from '@/i18n';

type Props = {
  alt: string;
  name: string;
};

type Screenshots = {
  [L in Language]: {
    light?: () => Promise<ImageMetadata>;
    dark?: () => Promise<ImageMetadata>;
  };
};

const { altLanguage, resolvedLanguage } = useTranslations(Astro.url);

const { alt, name } = Astro.props;
const images = import.meta.glob<ImageMetadata>(`@/assets/screenshots/*.{jpeg,jpg,png,gif}`, {
  import: 'default'
});

const screenshots: Screenshots = { en: {}, fr: {} };
for (const path in images) {
  const [basename, language, theme] = path.split('/screenshots/').at(-1)?.split('.')!;
  if (!(basename && (language === 'en' || language === 'fr') && (theme === 'dark' || theme === 'light'))) {
    throw new Error(
      `Invalid screenshot path '${path}', expected filename format '*.(dark|light).(en|fr).(jpeg|jpg|png,gif)'`
    );
  } else if (basename === name) {
    screenshots[language][theme] = images[path];
  }
}

const sources = {
  light: await (screenshots[resolvedLanguage]?.light?.() ?? screenshots[altLanguage]?.light?.()),
  dark: await (screenshots[resolvedLanguage]?.dark?.() ?? screenshots[altLanguage]?.dark?.())
};

if (!(sources.light && sources.dark)) {
  throw new Error(`Failed to find screenshot '${name}' from files: ${Object.keys(images).join(', ')}`);
}

const id = crypto.randomUUID();
---

<div class="image-container screenshot">
  <Image style="display: none;" data-variant="light" id={id} src={sources.light} alt={alt} />
  <Image style="display: none;" data-variant="dark" id={id} src={sources.dark} alt={alt} />
</div>
<style>
  .screenshot {
    box-shadow: var(--screenshot-shadow);
  }
</style>

<script>
  function getCurrentTheme() {
    return (
      document.documentElement.getAttribute('data-mode') ??
      document.documentElement.getAttribute('data-theme') ??
      'light'
    );
  }
  function toggleScreenshots(theme: string) {
    document.querySelectorAll<HTMLImageElement>('.image-container [data-variant]').forEach((image) => {
      if (image.getAttribute('data-variant') === theme) {
        image.style.display = 'block';
      } else {
        image.style.display = 'none';
      }
    });
  }

  const theme = getCurrentTheme();
  toggleScreenshots(theme);

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'data-mode' || mutation.attributeName === 'data-theme') {
        const target = mutation.target as HTMLHtmlElement;
        const updatedTheme = target.getAttribute(mutation.attributeName);
        if (updatedTheme === 'light' || updatedTheme === 'dark') {
          toggleScreenshots(updatedTheme);
        } else {
          console.error(`Unexpected value for '${mutation.attributeName}' attribute: ${updatedTheme}`);
        }
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true
  });
</script>
