---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import { useTranslations, type Language } from '@/i18n';

type Props = {
  alt: string;
  name: string;
};

type Screenshots = {
  [L in Language]: {
    light?: () => Promise<ImageMetadata>;
    dark?: () => Promise<ImageMetadata>;
  };
};

const { altLanguage, resolvedLanguage } = useTranslations(Astro.url);

const { alt, name } = Astro.props;
const images = import.meta.glob<ImageMetadata>(`@/assets/screenshots/*.{jpeg,jpg,png,gif}`, {
  import: 'default'
});

const screenshots: Screenshots = { en: {}, fr: {} };
for (const path in images) {
  const [basename, language, theme] = path.split('/screenshots/').at(-1)?.split('.')!;
  if (!(basename && (language === 'en' || language === 'fr') && (theme === 'dark' || theme === 'light'))) {
    throw new Error(
      `Invalid screenshot path '${path}', expected filename format '*.(dark|light).(en|fr).(jpeg|jpg|png,gif)'`
    );
  } else if (basename === name) {
    screenshots[language][theme] = images[path];
  }
}

let src: ImageMetadata;
if (screenshots[resolvedLanguage].light) {
  src = await screenshots[resolvedLanguage].light!();
} else if (screenshots[altLanguage].light) {
  src = await screenshots[altLanguage].light!();
} else {
  throw new Error(`Failed to find screenshot '${name}' from files: ${Object.keys(images).join(', ')}`);
}

const id = crypto.randomUUID();
---

<Image id={id} src={src} alt={alt} />
